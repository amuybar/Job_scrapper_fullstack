{"ast":null,"code":"import axios from 'axios';\nexport const apiClient = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the token\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Login API\nexport const login = async (username, password) => {\n  try {\n    const response = await apiClient.post('/login/', {\n      username,\n      password\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\n\n// Signup API\nexport const signup = async (username, password, email) => {\n  try {\n    const response = await apiClient.post('/signup/', {\n      username,\n      password,\n      email\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\n\n// Forgot Password API\nexport const forgotPassword = async email => {\n  try {\n    const response = await apiClient.post('/forgot-password/', {\n      email\n    }, {\n      headers: {\n        Authorization: `Token ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\n\n// Reset Password API\nexport const resetPassword = async (uidb64, token, password) => {\n  try {\n    const response = await apiClient.post(`/reset-password/${uidb64}/${token}/`, {\n      password\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\n\n// User Details API\nexport const getUserDetails = async () => {\n  try {\n    const response = await apiClient.get('/user/');\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\n\n// Obtain JWT Token API\nexport const getJWTToken = async (username, password) => {\n  try {\n    const response = await apiClient.post('/api/token/', {\n      username,\n      password\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\n\n// Refresh JWT Token API\nexport const refreshJWTToken = async refreshToken => {\n  try {\n    const response = await apiClient.post('/api/token/refresh/', {\n      refresh: refreshToken\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\nexport default apiClient;","map":{"version":3,"names":["axios","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","login","username","password","response","post","data","signup","email","forgotPassword","Authorization","resetPassword","uidb64","getUserDetails","get","getJWTToken","refreshJWTToken","refreshToken","refresh"],"sources":["/home/barrack/Job-project/job_scrapper_frontend/src/service/auth.tsx"],"sourcesContent":["import axios from 'axios';\n\nexport const apiClient = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to include the token\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Token ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Login API\nexport const login = async (username: string, password: string) => {\n  try {\n    const response = await apiClient.post('/login/', { username, password });\n    return response.data;\n  } catch (error:any) {\n    throw error.response.data;\n  }\n};\n\n// Signup API\nexport const signup = async (username: string, password: string, email: string) => {\n  try {\n    const response = await apiClient.post('/signup/', { username, password, email });\n    return response.data;\n  } catch (error:any) {\n    throw error.response.data;\n  }\n};\n\n// Forgot Password API\nexport const forgotPassword = async (email: string) => {\n  try {\n    const response = await apiClient.post('/forgot-password/', \n    { email }, \n    { headers: { Authorization: `Token ${token}` } }\n);\n\n    return response.data;\n  } catch (error:any) {\n    throw error.response.data;\n  }\n};\n\n// Reset Password API\nexport const resetPassword = async (uidb64: string, token: string, password: string) => {\n  try {\n    const response = await apiClient.post(`/reset-password/${uidb64}/${token}/`, { password });\n    return response.data;\n  } catch (error:any) {\n    throw error.response.data;\n  }\n};\n\n// User Details API\nexport const getUserDetails = async () => {\n  try {\n    const response = await apiClient.get('/user/');\n    return response.data;\n  } catch (error:any) {\n    throw error.response.data;\n  }\n};\n\n// Obtain JWT Token API\nexport const getJWTToken = async (username: string, password: string) => {\n  try {\n    const response = await apiClient.post('/api/token/', { username, password });\n    return response.data;\n  } catch (error:any) {\n    throw error.response.data;\n  }\n};\n\n// Refresh JWT Token API\nexport const refreshJWTToken = async (refreshToken: string) => {\n  try {\n    const response = await apiClient.post('/api/token/refresh/', { refresh: refreshToken });\n    return response.data;\n  } catch (error:any) {\n    throw error.response.data;\n  }\n};\n\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}