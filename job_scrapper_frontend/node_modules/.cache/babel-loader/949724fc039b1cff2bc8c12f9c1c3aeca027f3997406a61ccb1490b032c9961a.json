{"ast":null,"code":"var _jsxFileName = \"/home/barrack/Job-project/job_scrapper_frontend/src/components/ResetPassword.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { resetPassword } from '../service/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResetPassword = () => {\n  _s();\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const {\n    uidb64,\n    token\n  } = useParams();\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await resetPassword(uidb64, token, password);\n      setMessage(response.success);\n    } catch (error) {\n      setMessage(error.error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(ResetPassword, \"26y7IWyJBYvzzI75z32/BOYGgQc=\", false, function () {\n  return [useParams];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","useParams","resetPassword","jsxDEV","_jsxDEV","ResetPassword","_s","password","setPassword","message","setMessage","uidb64","token","handleSubmit","e","preventDefault","response","success","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","onChange","target","required","_c","$RefreshReg$"],"sources":["/home/barrack/Job-project/job_scrapper_frontend/src/components/ResetPassword.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { resetPassword } from '../service/auth';\n\nconst ResetPassword: React.FC = () => {\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const { uidb64, token } = useParams<{ uidb64: string; token?: string }>();\n\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    try {\n      const response = await resetPassword(uidb64, token, password);\n      setMessage(response.success);\n    } catch (error:any) {\n      setMessage(error.error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Reset Password</h2>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"password\">New Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n          />\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n      {message && <p>{message}</p>}\n    </div>\n  );\n};\n\nexport default ResetPassword;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,aAAa,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,aAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM;IAAEW,MAAM;IAAEC;EAAM,CAAC,GAAGX,SAAS,CAAqC,CAAC;EAGzE,MAAMY,YAAY,GAAG,MAAOC,CAAmC,IAAK;IAClEA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMd,aAAa,CAACS,MAAM,EAAEC,KAAK,EAAEL,QAAQ,CAAC;MAC7DG,UAAU,CAACM,QAAQ,CAACC,OAAO,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAS,EAAE;MAClBR,UAAU,CAACQ,KAAK,CAACA,KAAK,CAAC;IACzB;EACF,CAAC;EAED,oBACEd,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBnB,OAAA;MAAMoB,QAAQ,EAAEX,YAAa;MAAAM,QAAA,gBAC3Bf,OAAA;QAAAe,QAAA,gBACEf,OAAA;UAAOqB,OAAO,EAAC,UAAU;UAAAN,QAAA,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC9CnB,OAAA;UACEsB,IAAI,EAAC,UAAU;UACfC,EAAE,EAAC,UAAU;UACbC,KAAK,EAAErB,QAAS;UAChBsB,QAAQ,EAAGf,CAAC,IAAKN,WAAW,CAACM,CAAC,CAACgB,MAAM,CAACF,KAAK,CAAE;UAC7CG,QAAQ;QAAA;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACNnB,OAAA;QAAQsB,IAAI,EAAC,QAAQ;QAAAP,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,EACNd,OAAO,iBAAIL,OAAA;MAAAe,QAAA,EAAIV;IAAO;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzB,CAAC;AAEV,CAAC;AAACjB,EAAA,CApCID,aAAuB;EAAA,QAGDJ,SAAS;AAAA;AAAA+B,EAAA,GAH/B3B,aAAuB;AAsC7B,eAAeA,aAAa;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}