{"ast":null,"code":"import axios from 'axios';\nfunction getTokenFromLocalStorage() {\n  try {\n    const token = localStorage.getItem('token');\n    if (token) {\n      return token;\n    } else {\n      return null; // Or you can throw an error if no token exists\n    }\n  } catch (error) {\n    console.error('Error retrieving token from local storage:', error);\n    return null; // Or handle the error differently\n  }\n}\nconst token = getTokenFromLocalStorage();\nif (token) {\n  console.log('Found token:', token);\n  // Use the token for authorization purposes\n} else {\n  console.log('No token found in local storage');\n}\nexport const apiClient = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add a request interceptor to include the token\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Token ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Login API\nexport const login = async (username, password) => {\n  try {\n    const response = await apiClient.post('/login/', {\n      username,\n      password\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\n\n// Signup API\nexport const signup = async (username, password, email) => {\n  try {\n    const response = await apiClient.post('/signup/', {\n      username,\n      password,\n      email\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\n\n// Forgot Password API\nexport const forgotPassword = async email => {\n  try {\n    const response = await apiClient.post('/forgot-password/', {\n      email\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\n\n// Reset Password API\nexport const resetPassword = async (uidb64, password) => {\n  try {\n    const response = await apiClient.post(`/reset-password/${uidb64}/${token}/`, {\n      password\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\n\n// User Details API\n// User Details API\nexport const getUserDetails = async () => {\n  try {\n    const token = localStorage.getItem('token'); // Retrieve the token from local storage\n    const response = await apiClient.get('/user/', {\n      headers: {\n        Authorization: `Token ${token}` // Include the token in the Authorization header\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\n\n// Obtain JWT Token API\nexport const getJWTToken = async (username, password) => {\n  try {\n    const response = await apiClient.post('/api/token/', {\n      username,\n      password\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\n\n// Refresh JWT Token API\nexport const refreshJWTToken = async refreshToken => {\n  try {\n    const response = await apiClient.post('/api/token/refresh/', {\n      refresh: refreshToken\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};","map":{"version":3,"names":["axios","getTokenFromLocalStorage","token","localStorage","getItem","error","console","log","apiClient","create","baseURL","headers","interceptors","request","use","config","Promise","reject","login","username","password","response","post","data","signup","email","forgotPassword","resetPassword","uidb64","getUserDetails","get","Authorization","getJWTToken","refreshJWTToken","refreshToken","refresh"],"sources":["/home/barrack/Job-project/job_scrapper_frontend/src/service/auth.tsx"],"sourcesContent":["import axios from 'axios';\n\n\nfunction getTokenFromLocalStorage() {\n  try {\n    const token = localStorage.getItem('token');\n    if (token) {\n      return token;\n    } else {\n      return null;  // Or you can throw an error if no token exists\n    }\n  } catch (error) {\n    console.error('Error retrieving token from local storage:', error);\n    return null;  // Or handle the error differently\n  }\n}\nconst token = getTokenFromLocalStorage();\nif (token) {\n  console.log('Found token:', token);\n  // Use the token for authorization purposes\n} else {\n  console.log('No token found in local storage');\n\n}\n\nexport const apiClient = axios.create({\n  baseURL: 'http://localhost:8000/api',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Add a request interceptor to include the token\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['Authorization'] = `Token ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Login API\nexport const login = async (username: string, password: string) => {\n  try {\n    const response = await apiClient.post('/login/', { username, password });\n    return response.data;\n  } catch (error:any) {\n    throw error.response.data;\n  }\n};\n\n// Signup API\nexport const signup = async (username: string, password: string, email: string) => {\n  try {\n    const response = await apiClient.post('/signup/', { username, password, email });\n    return response.data;\n  } catch (error:any) {\n    throw error.response.data;\n  }\n};\n\n// Forgot Password API\nexport const forgotPassword = async (email:string) => {\n  try {\n    const response = await apiClient.post('/forgot-password/', { email });\n    return response.data;\n  } catch (error:any) {\n    throw error.response.data;\n  }\n};\n\n\n// Reset Password API\nexport const resetPassword = async (uidb64: string,  password: string) => {\n  try {\n    const response = await apiClient.post(`/reset-password/${uidb64}/${token}/`, { password });\n    return response.data;\n  } catch (error:any) {\n    throw error.response.data;\n  }\n};\n\n// User Details API\n// User Details API\nexport const getUserDetails = async () => {\n  try {\n    const token = localStorage.getItem('token'); // Retrieve the token from local storage\n    const response = await apiClient.get('/user/', {\n      headers: {\n        Authorization: `Token ${token}` // Include the token in the Authorization header\n      }\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\n\n// Obtain JWT Token API\nexport const getJWTToken = async (username: string, password: string) => {\n  try {\n    const response = await apiClient.post('/api/token/', { username, password });\n    return response.data;\n  } catch (error:any) {\n    throw error.response.data;\n  }\n};\n\n// Refresh JWT Token API\nexport const refreshJWTToken = async (refreshToken: string) => {\n  try {\n    const response = await apiClient.post('/api/token/refresh/', { refresh: refreshToken });\n    return response.data;\n  } catch (error:any) {\n    throw error.response.data;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}